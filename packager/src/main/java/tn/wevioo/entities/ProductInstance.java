package tn.wevioo.entities;
// Generated 28 mars 2017 22:31:56 by Hibernate Tools 5.2.1.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import nordnet.architecture.exceptions.explicit.MalformedXMLException;
import nordnet.architecture.exceptions.explicit.NotFoundException;
import nordnet.architecture.exceptions.explicit.NotRespectedRulesException;
import nordnet.architecture.exceptions.implicit.NullException;
import nordnet.architecture.exceptions.implicit.NullException.NullCases;
import nordnet.architecture.exceptions.utils.ErrorCode;
import nordnet.drivers.contract.ProductDriver;
import nordnet.drivers.contract.exceptions.DriverException;
import nordnet.drivers.contract.types.FeasibilityTestResult;
import nordnet.drivers.contract.types.State;
import nordnet.drivers.tools.ReferenceKeys;
import tn.wevioo.ManualDriverFactory;
import tn.wevioo.exceptions.PackagerException;
import tn.wevioo.exceptions.RestTemplateException;
import tn.wevioo.model.feasibility.FeasibilityResult;
import tn.wevioo.model.product.action.ProductInstanceAction;
import tn.wevioo.model.request.DeliveryProperty;
import tn.wevioo.service.ProductInstanceService;
import tn.wevioo.service.ProductModelProductDriverPortService;
import tn.wevioo.service.WebServiceUserService;

/**
 * ProductInstance generated by hbm2java
 */
@Entity
@Table(name = "product_instance", catalog = "nn_packager_management_recette")
public class ProductInstance implements java.io.Serializable {

	private static final Log LOGGER = LogFactory.getLog(ProductInstance.class);

	private static final long serialVersionUID = 1L;
	private Integer idProductInstance;
	private ProductModel productModel;
	private String providerProductId;
	private Date creationDate;
	private Date lastUpdate;
	private String lastKnownState;
	private Date lastKnownStateUpdate;
	private ProductInstance originalProductInstance = null;
	private ProductDriver productDriver;
	private Set<ProductInstanceReference> productInstanceReferences = new HashSet<ProductInstanceReference>(0);
	private Set<ShippingDemand> shippingDemands = new HashSet<ShippingDemand>(0);
	private Set<ProductInstanceDiagnostic> productInstanceDiagnostics = new HashSet<ProductInstanceDiagnostic>(0);
	private Set<PackagerInstance> packagers = new HashSet<PackagerInstance>(0);

	public ProductInstance() {
	}

	public ProductInstance(ProductModel productModel, String providerProductId, Date creationDate, Date lastUpdate) {
		this.productModel = productModel;
		this.providerProductId = providerProductId;
		this.creationDate = creationDate;
		this.lastUpdate = lastUpdate;
	}

	public ProductInstance(ProductModel productModel, String providerProductId, Date creationDate, Date lastUpdate,
			String lastKnownState, Date lastKnownStateUpdate, Set<ProductInstanceReference> productInstanceReferences,
			Set<ShippingDemand> shippingDemands, Set<ProductInstanceDiagnostic> productInstanceDiagnostics) {
		this.productModel = productModel;
		this.providerProductId = providerProductId;
		this.creationDate = creationDate;
		this.lastUpdate = lastUpdate;
		this.lastKnownState = lastKnownState;
		this.lastKnownStateUpdate = lastKnownStateUpdate;
		this.productInstanceReferences = productInstanceReferences;
		this.shippingDemands = shippingDemands;
		this.productInstanceDiagnostics = productInstanceDiagnostics;
	}

	public ProductInstance(ProductDriver productDriver) {
		if (productDriver == null) {
			throw new NullException(NullCases.NULL, "productDriver parameter");
		}
		setProviderProductId(productDriver.getProviderProductId());
		setProductDriver(productDriver);
	}

	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "packager_instance_product_instance", joinColumns = {
			@JoinColumn(name = "id_product_instance", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "id_packager_instance", nullable = false, updatable = false) })
	public Set<PackagerInstance> getPackagers() {
		return packagers;
	}

	public void setPackagers(Set<PackagerInstance> packagers) {
		this.packagers = packagers;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id_product_instance", unique = true, nullable = false)
	public Integer getIdProductInstance() {
		return this.idProductInstance;
	}

	public void setIdProductInstance(Integer idProductInstance) {
		this.idProductInstance = idProductInstance;
	}

	@Transient
	public ProductInstance getOriginalProductInstance() {
		return originalProductInstance;
	}

	public void setOriginalProductInstance(ProductInstance originalProductInstance) {
		this.originalProductInstance = originalProductInstance;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_product_model", nullable = false)
	public ProductModel getProductModel() {
		return this.productModel;
	}

	public void setProductModel(ProductModel productModel) {
		this.productModel = productModel;
	}

	@Column(name = "provider_product_id", nullable = false)
	public String getProviderProductId() {
		return this.providerProductId;
	}

	public void setProviderProductId(String providerProductId) {
		this.providerProductId = providerProductId;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creation_date", nullable = false, length = 19)
	public Date getCreationDate() {
		return this.creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update", nullable = false, length = 19)
	public Date getLastUpdate() {
		return this.lastUpdate;
	}

	public void setLastUpdate(Date lastUpdate) {
		this.lastUpdate = lastUpdate;
	}

	@Column(name = "last_known_state")
	public String getLastKnownState() {
		return this.lastKnownState;
	}

	public void setLastKnownState(String lastKnownState) {
		this.lastKnownState = lastKnownState;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_known_state_update", length = 19)
	public Date getLastKnownStateUpdate() {
		return this.lastKnownStateUpdate;
	}

	public void setLastKnownStateUpdate(Date lastKnownStateUpdate) {
		this.lastKnownStateUpdate = lastKnownStateUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productInstance")
	public Set<ProductInstanceReference> getProductInstanceReferences() {
		return this.productInstanceReferences;
	}

	public void setProductInstanceReferences(Set<ProductInstanceReference> productInstanceReferences) {
		this.productInstanceReferences = productInstanceReferences;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "shipping_demand_product_instance", catalog = "nn_packager_management_recette", joinColumns = {
			@JoinColumn(name = "id_product_instance", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "id_shipping_demand", nullable = false, updatable = false) })
	public Set<ShippingDemand> getShippingDemands() {
		return this.shippingDemands;
	}

	public void setShippingDemands(Set<ShippingDemand> shippingDemands) {
		this.shippingDemands = shippingDemands;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productInstance")
	public Set<ProductInstanceDiagnostic> getProductInstanceDiagnostics() {
		return this.productInstanceDiagnostics;
	}

	public void setProductInstanceDiagnostics(Set<ProductInstanceDiagnostic> productInstanceDiagnostics) {
		this.productInstanceDiagnostics = productInstanceDiagnostics;
	}

	@Transient
	public PackagerInstance getPackager() {
		List<PackagerInstance> asList = new ArrayList<PackagerInstance>(getPackagers());

		if (asList.size() > 0) {
			return asList.get(0);
		} else {
			return null;
		}
	}

	@Transient
	public ProductDriver getProductDriver() {
		return productDriver;
	}

	public void setProductDriver(ProductDriver productDriver) {
		this.productDriver = productDriver;
	}

	@Transient
	public State getCurrentState(ProductModelProductDriverPortService productModelProductDriverPortService)
			throws DriverException, RestTemplateException, NotFoundException {

		int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
				.getProductDriverPort();
		String url = "http://localhost:" + port;
		RestTemplate rest = new RestTemplate();
		try {
			String currentState_string = (String) rest
					.getForObject(url + "/getCurrentState?ref=" + this.getProviderProductId(), String.class);
			String productInstanceStatus = this.getLastKnownState();

			if (!currentState_string.equals(productInstanceStatus)) {
				this.setLastKnownState(currentState_string);
				this.setLastKnownStateUpdate(new Date());
			}

			if (LOGGER.isInfoEnabled()) {
				LOGGER.info("Product [" + this.getIdProductInstance() + "]'s current state : [" + currentState_string
						+ "]");
			}

			return State.valueOf(currentState_string.toString());
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
	}

	public void suspend(final String properties, PackagerActionHistory packagerHistory,
			WebServiceUserService webServiceUserService, ProductInstanceService productInstanceService,
			ProductModelProductDriverPortService productModelProductDriverPortService)
			throws DriverException, MalformedXMLException, NotRespectedRulesException, RestTemplateException {

		if ((properties != null) && (properties.trim().length() == 0)) {
			throw new NullException(NullCases.EMPTY, "properties parameter");
		}

		if (packagerHistory == null) {
			throw new NullException(NullCases.NULL, "packagerHistory parameter");
		}

		try {
			int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
					.getProductDriverPort();
			String url = "http://localhost:" + port;
			RestTemplate rest = new RestTemplate();

			@SuppressWarnings("unused")
			String result = (String) rest.getForObject(
					url + "/suspendProduct?properties=" + properties + "&ppid=" + this.getProviderProductId(),
					String.class);

			ProductActionHistory history = new ProductActionHistory(ProductInstanceAction.SUSPEND, this, this,
					properties, webServiceUserService, productInstanceService);
			packagerHistory.addProductAction(history);

			// this.resetLastKnownState();
			this.setLastKnownState("SUSPENDED");
			this.setLastKnownStateUpdate(new Date());

			// if
			// (this.productModel.getDriverFactory().getDriverInternalConfiguration().areReferencesChangedOnSuspension())
			// {
			try {
				this.updateReferences(packagerHistory, webServiceUserService, productInstanceService,
						productModelProductDriverPortService);
			} catch (DriverException e) {
				this.productInstanceReferences.clear();
			}
			// }

			if (LOGGER.isInfoEnabled()) {
				LOGGER.info("Product [" + getIdProductInstance() + "] has been successfully suspended.");
			}
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
	}

	@Transient
	public String getProductProperties(ProductModelProductDriverPortService productModelProductDriverPortService)
			throws DriverException, RestTemplateException {
		// return this.getProductDriver().getProductProperties();

		try {
			int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
					.getProductDriverPort();
			String url = "http://localhost:" + port;
			RestTemplate rest = new RestTemplate();

			String result = (String) rest
					.getForObject(url + "/getProductProperties?ppid=" + this.getProviderProductId(), String.class);

			return result;
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
	}

	public void updateReferences(PackagerActionHistory packagerHistory, WebServiceUserService webServiceUserService,
			ProductInstanceService productInstanceService,
			ProductModelProductDriverPortService productModelProductDriverPortService)
			throws DriverException, RestTemplateException, NotFoundException {

		if (packagerHistory == null) {
			throw new NullException(NullCases.NULL, "packagerHistory parameter");
		}

		int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
				.getProductDriverPort();
		String url = "http://localhost:" + port;
		RestTemplate rest = new RestTemplate();

		try {
			tn.wevioo.tools.Reference[] newDriverReference = (tn.wevioo.tools.Reference[]) rest.getForObject(
					url + "/getReferences?ppid=" + this.providerProductId, tn.wevioo.tools.Reference[].class);
			List<tn.wevioo.tools.Reference> newDriverReferences = Arrays.asList(newDriverReference);

			if (this.productInstanceReferences != null) {
				this.productInstanceReferences.clear();
			} else {
				this.productInstanceReferences = new HashSet<ProductInstanceReference>();
			}

			for (tn.wevioo.tools.Reference reference : newDriverReferences) {
				ProductInstanceReference newReference = new ProductInstanceReference();
				newReference.setDiscriminatorType(reference.getKey().toString());
				newReference.setDiscriminatorValue(reference.getValue());
				newReference.setCreationDate(new Date());

				this.addReference(newReference);
			}

			ProductActionHistory history = null;
			if (this.originalProductInstance == null) {
				history = new ProductActionHistory(ProductInstanceAction.UPDATE_REFERENCES, this, this, null,
						webServiceUserService, productInstanceService);
			} else {
				history = new ProductActionHistory(ProductInstanceAction.UPDATE_REFERENCES,
						this.originalProductInstance, this, null, webServiceUserService, productInstanceService);
			}

			packagerHistory.addProductAction(history);

			if (LOGGER.isInfoEnabled()) {
				LOGGER.info("Product [" + getIdProductInstance() + "]'s references have been updated.");
			}
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
	}

	public void addReference(ProductInstanceReference reference) {
		if (this.productInstanceReferences == null) {
			this.productInstanceReferences = new HashSet<ProductInstanceReference>();
		}

		if (reference == null) {
			throw new NullException(NullCases.NULL, "reference parameter");
		}

		if ((reference.getDiscriminatorType() == null) || (reference.getDiscriminatorType().trim().length() == 0)) {
			throw new NullException(NullCases.NULL_EMPTY, "reference.type parameter");
		}

		if ((reference.getDiscriminatorValue() == null) || (reference.getDiscriminatorValue().trim().length() == 0)) {
			throw new NullException(NullCases.NULL_EMPTY, "reference.value parameter");
		}

		if (reference.getProductInstance() != null) {
			reference.getProductInstance().getProductInstanceReferences().remove(reference);
		}

		reference.setProductInstance(this);
		reference.setCreationDate(new Date());
		this.productInstanceReferences.add(reference);
	}

	public void resetLastKnownState() {
		this.lastKnownState = null;
		this.lastKnownStateUpdate = null;
	}

	public void activate(final String properties, PackagerActionHistory packagerHistory,
			WebServiceUserService webServiceUserService, ProductInstanceService productInstanceService,
			ProductModelProductDriverPortService productModelProductDriverPortService) throws DriverException,
			MalformedXMLException, NotRespectedRulesException, RestTemplateException, NotFoundException {

		if ((properties != null) && (properties.trim().length() == 0)) {
			throw new NullException(NullCases.EMPTY, "properties parameter");
		}

		if (packagerHistory == null) {
			throw new NullException(NullCases.NULL, "packagerHistory parameter");
		}

		int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
				.getProductDriverPort();
		String url = "http://localhost:" + port;
		RestTemplate rest = new RestTemplate();

		try {
			@SuppressWarnings("unused")
			String result = (String) rest.getForObject(
					url + "/activateProduct?properties=" + properties + "&ppid=" + this.getProviderProductId(),
					String.class);

			ProductActionHistory history = null;

			if (this.originalProductInstance == null) {
				history = new ProductActionHistory(ProductInstanceAction.ACTIVATE, this, this, properties,
						webServiceUserService, productInstanceService);
			} else {
				history = new ProductActionHistory(ProductInstanceAction.ACTIVATE, this.originalProductInstance, this,
						properties, webServiceUserService, productInstanceService);
			}
			packagerHistory.addProductAction(history);

			// this.resetLastKnownState();
			this.setLastKnownState("ACTIVE");
			this.setLastKnownStateUpdate(new Date());

			// if
			// (this.productModel.getDriverFactory().getDriverInternalConfiguration().areReferencesChangedOnActivation())
			// {
			try {
				this.updateReferences(packagerHistory, webServiceUserService, productInstanceService,
						productModelProductDriverPortService);
			} catch (DriverException e) {
				this.productInstanceReferences.clear();
			}
			// }

			if (LOGGER.isInfoEnabled()) {
				LOGGER.info("Product [" + getIdProductInstance() + "] has been successfully activated.");
			}
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
	}

	public void reactivate(final String properties, PackagerActionHistory packagerHistory,
			WebServiceUserService webServiceUserService, ProductInstanceService productInstanceService,
			ProductModelProductDriverPortService productModelProductDriverPortService)
			throws NotRespectedRulesException, MalformedXMLException, DriverException, RestTemplateException,
			NotFoundException {
		if ((properties != null) && (properties.trim().length() == 0)) {
			throw new NullException(NullCases.EMPTY, "properties parameter");
		}

		if (packagerHistory == null) {
			throw new NullException(NullCases.NULL, "packagerHistory parameter");
		}

		int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
				.getProductDriverPort();
		String url = "http://localhost:" + port;
		RestTemplate rest = new RestTemplate();

		try {
			@SuppressWarnings("unused")
			String result = (String) rest.getForObject(
					url + "/reactivateProduct?properties=" + properties + "&ppid=" + this.getProviderProductId(),
					String.class);

			ProductActionHistory history = null;

			if (this.originalProductInstance == null) {
				history = new ProductActionHistory(ProductInstanceAction.REACTIVATE, this, this, properties,
						webServiceUserService, productInstanceService);
			} else {
				history = new ProductActionHistory(ProductInstanceAction.REACTIVATE, this.originalProductInstance, this,
						properties, webServiceUserService, productInstanceService);
			}
			packagerHistory.addProductAction(history);

			// this.resetLastKnownState();
			this.setLastKnownState("ACTIVE");
			this.setLastKnownStateUpdate(new Date());

			// if
			// (this.productModel.getDriverFactory().getDriverInternalConfiguration()
			// .areReferencesChangedOnReactivation()) {
			try {
				this.updateReferences(packagerHistory, webServiceUserService, productInstanceService,
						productModelProductDriverPortService);
			} catch (DriverException e) {
				this.productInstanceReferences.clear();
			}
			// }

			if (LOGGER.isInfoEnabled()) {
				LOGGER.info("Product [" + getIdProductInstance() + "] has been successfully reactivated.");
			}
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
	}

	public void cancel(final String properties, PackagerActionHistory packagerHistory,
			WebServiceUserService webServiceUserService, ProductInstanceService productInstanceService,
			ProductModelProductDriverPortService productModelProductDriverPortService) throws DriverException,
			MalformedXMLException, NotRespectedRulesException, RestTemplateException, NotFoundException {

		if ((properties != null) && (properties.trim().length() == 0)) {
			throw new NullException(NullCases.EMPTY, "properties parameter");
		}

		if (packagerHistory == null) {
			throw new NullException(NullCases.NULL, "packagerHistory parameter");
		}

		int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
				.getProductDriverPort();
		String url = "http://localhost:" + port;
		RestTemplate rest = new RestTemplate();

		try {
			@SuppressWarnings("unused")
			String result = (String) rest.getForObject(
					url + "/cancelProduct?properties=" + properties + "&ppid=" + this.getProviderProductId(),
					String.class);

			ProductActionHistory history = null;

			if (this.originalProductInstance == null) {
				history = new ProductActionHistory(ProductInstanceAction.CANCEL, this, this, properties,
						webServiceUserService, productInstanceService);
			} else {
				history = new ProductActionHistory(ProductInstanceAction.CANCEL, this.originalProductInstance, this,
						properties, webServiceUserService, productInstanceService);
			}
			packagerHistory.addProductAction(history);

			// this.resetLastKnownState();
			this.setLastKnownState("CANCELED");
			this.setLastKnownStateUpdate(new Date());

			// if
			// (this.productModel.getDriverFactory().getDriverInternalConfiguration().areReferencesChangedOnCancelation())
			// {
			try {
				this.updateReferences(packagerHistory, webServiceUserService, productInstanceService,
						productModelProductDriverPortService);
			} catch (DriverException e) {
				this.productInstanceReferences.clear();
			}
			// }

			if (LOGGER.isInfoEnabled()) {
				LOGGER.info("Product [" + getIdProductInstance() + "] has been successfully canceled.");
			}
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
	}

	public void reset(final String properties, PackagerActionHistory packagerHistory,
			WebServiceUserService webServiceUserService, ProductInstanceService productInstanceService,
			ProductModelProductDriverPortService productModelProductDriverPortService) throws DriverException,
			MalformedXMLException, NotRespectedRulesException, RestTemplateException, NotFoundException {

		if ((properties != null) && (properties.trim().length() == 0)) {
			throw new NullException(NullCases.EMPTY, "properties parameter");
		}

		if (packagerHistory == null) {
			throw new NullException(NullCases.NULL, "packagerHistory parameter");
		}

		int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
				.getProductDriverPort();
		String url = "http://localhost:" + port;
		RestTemplate rest = new RestTemplate();

		try {
			@SuppressWarnings("unused")
			String result = (String) rest.getForObject(
					url + "/resetProduct?properties=" + properties + "&ppid=" + this.getProviderProductId(),
					String.class);

			ProductActionHistory history = null;

			if (this.originalProductInstance == null) {
				history = new ProductActionHistory(ProductInstanceAction.RESET, this, this, properties,
						webServiceUserService, productInstanceService);
			} else {
				history = new ProductActionHistory(ProductInstanceAction.RESET, this.originalProductInstance, this,
						properties, webServiceUserService, productInstanceService);
			}
			packagerHistory.addProductAction(history);

			// this.resetLastKnownState();
			this.setLastKnownState("RESET");
			this.setLastKnownStateUpdate(new Date());

			// if
			// (this.productModel.getDriverFactory().getDriverInternalConfiguration().areReferencesChangedOnReset())
			// {
			try {
				this.updateReferences(packagerHistory, webServiceUserService, productInstanceService,
						productModelProductDriverPortService);
			} catch (DriverException e) {
				this.productInstanceReferences.clear();
			}
			// }

			if (LOGGER.isInfoEnabled()) {
				LOGGER.info("Product [" + getIdProductInstance() + "] has been successfully reseted.");
			}
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
	}

	@Transient
	public String getUsageProperties(ProductModelProductDriverPortService productModelProductDriverPortService)
			throws DriverException, RestTemplateException, NotFoundException {

		int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
				.getProductDriverPort();
		String url = "http://localhost:" + port;
		RestTemplate rest = new RestTemplate();

		try {
			String result = (String) rest
					.getForObject(url + "/performGetUsageProperties?ppid=" + this.providerProductId, String.class);

			return result;
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
	}

	public void updateSelfDiagnostics(PackagerActionHistory packagerHistory,
			WebServiceUserService webServiceUserService, ProductInstanceService productInstanceService,
			ProductModelProductDriverPortService productModelProductDriverPortService)
			throws DriverException, RestTemplateException, NotFoundException {
		if (packagerHistory == null) {
			throw new NullException(NullCases.NULL, "packagerHistory parameter");
		}

		// Map<String, String> newDriverDiagnostics =
		// this.getProductDriver().getSelfDiagnostics();

		int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
				.getProductDriverPort();
		String url = "http://localhost:" + port;
		RestTemplate rest = new RestTemplate();

		try {
			String result = (String) rest.getForObject(url + "/getSelfDiagnostics", String.class);

			Map<String, String> newDriverDiagnostics = new HashMap<String, String>();
			ObjectMapper mapper = new ObjectMapper();

			if (productInstanceDiagnostics == null) {
				this.productInstanceDiagnostics = new HashSet<ProductInstanceDiagnostic>();
			} else {
				this.productInstanceDiagnostics.clear();
			}

			try {
				newDriverDiagnostics = mapper.readValue(result, new TypeReference<HashMap<String, String>>() {
				});
			} catch (Exception e) {
			}

			for (String key : newDriverDiagnostics.keySet()) {
				ProductInstanceDiagnostic pid = new ProductInstanceDiagnostic();
				pid.setDiagnosticKey(key);
				pid.setDiagnosticValue(newDriverDiagnostics.get(key));
				pid.setCreationDate(new Date());

				this.addDiagnostic(pid);
			}

			ProductActionHistory history = null;
			if (this.originalProductInstance == null) {
				history = new ProductActionHistory(ProductInstanceAction.UPDATE_SELF_DIAGNOSTIC, this, this, null,
						webServiceUserService, productInstanceService);
			} else {
				history = new ProductActionHistory(ProductInstanceAction.UPDATE_SELF_DIAGNOSTIC,
						this.originalProductInstance, this, null, webServiceUserService, productInstanceService);
			}

			packagerHistory.addProductAction(history);
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
	}

	public void addDiagnostic(ProductInstanceDiagnostic diagnostic) {
		if (diagnostic == null) {
			throw new NullException(NullCases.NULL, "diagnostic parameter");
		}

		if (this.productInstanceDiagnostics == null) {
			this.productInstanceDiagnostics = new HashSet<ProductInstanceDiagnostic>();
		}

		if (diagnostic.getProductInstance() != null) {
			diagnostic.getProductInstance().getProductInstanceDiagnostics().remove(diagnostic);
		}
		diagnostic.setProductInstance(this);
		diagnostic.setCreationDate(new Date());
		this.productInstanceDiagnostics.add(diagnostic);
	}

	public ProductInstance clone() {
		ProductInstance pi = new ProductInstance();

		pi.setCreationDate(this.getCreationDate());
		pi.setLastKnownState(this.getLastKnownState());
		pi.setLastKnownStateUpdate(this.getLastKnownStateUpdate());
		pi.setProductModel(this.getProductModel());
		pi.setProviderProductId(this.getProviderProductId());
		pi.setShippingDemands(new HashSet<ShippingDemand>());
		pi.setLastUpdate(new Date());
		pi.originalProductInstance = this;

		for (ProductInstanceReference ref : this.getProductInstanceReferences()) {
			ProductInstanceReference clone = ref.clone();
			pi.addReference(clone);

		}

		if (this.getShippingDemands() != null && this.getShippingDemands().size() > 0) {
			for (ShippingDemand dd : this.getShippingDemands()) {
				ShippingDemand clone = dd.clone();
				pi.addShippingDemand(clone);
			}
		}

		pi.setIdProductInstance(null);

		return pi;
	}

	public void addShippingDemand(ShippingDemand shippingDemand) {
		if (this.shippingDemands == null) {
			this.shippingDemands = new HashSet<ShippingDemand>();
		}

		if (shippingDemand == null) {
			throw new NullException(NullCases.NULL, "delivery demand parameter");
		}
		this.shippingDemands.add(shippingDemand);
	}

	public void changeProperties(final String properties, PackagerActionHistory packagerActionHistory,
			WebServiceUserService webServiceUserService, ProductInstanceService productInstanceService,
			ManualDriverFactory manualDriverFactory,
			ProductModelProductDriverPortService productModelProductDriverPortService) throws DriverException,
			MalformedXMLException, NotRespectedRulesException, RestTemplateException, NotFoundException {

		if ((properties == null) || (properties.trim().length() == 0)) {
			throw new NullException(NullCases.NULL_EMPTY, "properties parameter");
		}

		if (packagerActionHistory == null) {
			throw new NullException(NullCases.NULL, "packagerHistory parameter");
		}

		if (this.getCurrentState(productModelProductDriverPortService).equals(State.CANCELED)) {
			throw new NotRespectedRulesException(new ErrorCode("1.2.2.12"),
					new Object[] { String.valueOf(this.getIdProductInstance()), State.CANCELED.toString() });
		}

		// this.getProductDriver().changeProperties(properties);

		int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
				.getProductDriverPort();
		String url = "http://localhost:" + port;
		RestTemplate rest = new RestTemplate();

		try {
			@SuppressWarnings("unused")
			String result = (String) rest.getForObject(
					url + "/changePropertiesManual?properties=" + properties + "&ppid=" + this.getProviderProductId(),
					String.class);
		} catch (Exception e) {
			throw new RestTemplateException("ProductDriver's project has occured a problem");
		}
		ProductActionHistory history = null;

		if (this.originalProductInstance == null) {
			history = new ProductActionHistory(ProductInstanceAction.CHANGE_PROPERTIES, this, this, properties,
					webServiceUserService, productInstanceService);
		} else {
			history = new ProductActionHistory(ProductInstanceAction.CHANGE_PROPERTIES, this.originalProductInstance,
					this, properties, webServiceUserService, productInstanceService);
		}
		packagerActionHistory.addProductAction(history);

		this.resetLastKnownState();

		// if
		// (manualDriverFactory.getDriverInternalConfiguration().areReferencesChangedOnChangeProperties())
		// {
		try {
			this.updateReferences(packagerActionHistory, webServiceUserService, productInstanceService,
					productModelProductDriverPortService);
		} catch (DriverException e) {
			this.getProductInstanceReferences().clear();
		}
		// }

		if (LOGGER.isInfoEnabled()) {
			LOGGER.info("Product [" + getIdProductInstance() + "]'s properties have been successfully changed.");
		}
	}

	public FeasibilityResult isPropertiesChangePossible(String properties,
			ProductModelProductDriverPortService productModelProductDriverPortService)
			throws DriverException, MalformedXMLException, PackagerException, NotRespectedRulesException,
			RestTemplateException, NotFoundException {

		if ((properties == null) || (properties.trim().length() == 0)) {
			throw new NullException(NullCases.NULL_EMPTY, "properties parameter");
		}

		if (this.getCurrentState(productModelProductDriverPortService).equals(State.CANCELED)) {
			NotRespectedRulesException ex = new NotRespectedRulesException(new ErrorCode("1.2.2.12"),
					new Object[] { String.valueOf(this.getIdProductInstance()), State.CANCELED.toString() });
			return new FeasibilityResult(false, ex.getMessage(), null);
		} else {
			int port = productModelProductDriverPortService.findByProductModel(this.getProductModel().getRetailerKey())
					.getProductDriverPort();
			String url = "http://localhost:" + port;
			RestTemplate rest = new RestTemplate();

			try {
				FeasibilityTestResult result = (FeasibilityTestResult) rest.getForObject(
						url + "/isPropertiesChangePossible?properties=" + properties, FeasibilityTestResult.class);
				FeasibilityResult feasibilityResult = new FeasibilityResult();
				BeanUtils.copyProperties(result, feasibilityResult);
				return feasibilityResult;
			} catch (Exception e) {
				throw new RestTemplateException("ProductDriver's project has occured a problem");
			}
		}
	}

	@Transient
	public List<ShippableItemModel> getDeliveryReferences() {
		List<ShippableItemModel> result = new ArrayList<ShippableItemModel>();

		if ((this.getPackager().getPackagerModel() != null)
				&& (this.getPackager().getPackagerModel().getPackagerModelProductModels() != null)) {
			for (PackagerModelProductModel pc : this.getPackager().getPackagerModel().getPackagerModelProductModels()) {
				if (pc.getProductModel().getRetailerKey().equals(this.productModel.getRetailerKey())) {
					if (pc.getProductModelShippableItemConfigurations() != null) {
						for (ProductModelShippableItemConfiguration pdc : pc
								.getProductModelShippableItemConfigurations()) {
							result.add(pdc.getShippableItemModel());
						}
					}
				}
			}
		}

		return result;
	}

	@Transient
	public List<DeliveryProperty> getDeliveryProperties() {
		List<DeliveryProperty> result = new ArrayList<DeliveryProperty>();

		String propertyPrefix = "product." + this.idProductInstance + ".";

		DeliveryProperty providerProperty = new DeliveryProperty();
		providerProperty.setName(propertyPrefix + "providerProductId");
		providerProperty.setValue(this.providerProductId);
		result.add(providerProperty);

		DeliveryProperty modelProperty = new DeliveryProperty();
		modelProperty.setName(propertyPrefix + "modelKey");
		modelProperty.setValue(this.productModel.getRetailerKey());
		result.add(modelProperty);

		for (ProductInstanceReference pir : this.getProductInstanceReferences()) {
			DeliveryProperty referenceProperty = new DeliveryProperty();
			referenceProperty.setName(propertyPrefix + pir.getDiscriminatorType());
			referenceProperty.setValue(pir.getDiscriminatorValue());
			result.add(referenceProperty);
		}

		String discriminator = "";
		for (ProductInstanceReference reference : this.getProductInstanceReferences()) {
			if (reference.getDiscriminatorType().equals(ReferenceKeys.DISCRIMINATOR.toString())) {
				discriminator = reference.getDiscriminatorValue();
				break;
			}
		}

		String shippingCompatibilityPropertyName = this.getProductModel().getRetailerKey().replace(".", "")
				+ ".product.identifiers";

		DeliveryProperty shippingCompatibilityProperty = new DeliveryProperty();
		shippingCompatibilityProperty.setName(shippingCompatibilityPropertyName);
		shippingCompatibilityProperty.setValue(discriminator);
		result.add(shippingCompatibilityProperty);

		// --- end correction ---

		return result;
	}

}
