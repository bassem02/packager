package tn.wevioo.entities;
// Generated 28 mars 2017 22:31:56 by Hibernate Tools 5.2.1.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration;

import nordnet.architecture.exceptions.explicit.DataSourceException;
import nordnet.architecture.exceptions.explicit.MalformedXMLException;
import nordnet.architecture.exceptions.explicit.NotFoundException;
import nordnet.architecture.exceptions.explicit.NotRespectedRulesException;
import nordnet.architecture.exceptions.implicit.NullException;
import nordnet.architecture.exceptions.implicit.NullException.NullCases;
import nordnet.architecture.exceptions.utils.ErrorCode;
import nordnet.drivers.contract.exceptions.DriverException;
import tn.wevioo.ManualDriver;
import tn.wevioo.ManualDriverFactory;
import tn.wevioo.exceptions.PackagerException;
import tn.wevioo.model.packager.action.PackagerInstanceAction;
import tn.wevioo.model.request.PackagerRequest;
import tn.wevioo.model.request.ProductRequest;
import tn.wevioo.service.ProductModelService;

/**
 * PackagerModel generated by hbm2java
 */
@EnableAutoConfiguration(exclude = JpaRepositoriesAutoConfiguration.class)
@Entity
@Table(name = "packager_model", catalog = "nn_packager_management_recette")
public class PackagerModel implements java.io.Serializable {

	private static final Log LOGGER = LogFactory.getLog(PackagerModel.class);

	private static final long serialVersionUID = 1L;
	private Long idPackagerModel;
	private String retailerKey;
	private String oldRetailerKey;
	private Date creationDate;
	private Date lastUpdate;
	private boolean multithreadedActions;
	private Set<Retailer> retailers = new HashSet<Retailer>(0);
	private Set<PackagerInstance> packagerInstances = new HashSet<PackagerInstance>(0);
	private Set<PackagerModelShippableItemConfiguration> packagerModelShippableItemConfigurations = new HashSet<PackagerModelShippableItemConfiguration>(
			0);
	private Set<DeliveryTemplateConfiguration> deliveryTemplateConfigurations = new HashSet<DeliveryTemplateConfiguration>(
			0);
	private Set<PackagerModelPossibleTransformations> packagerModelPossibleTransformationsesForIdPackagerModelTo = new HashSet<PackagerModelPossibleTransformations>(
			0);
	private Set<PackagerModelProductModel> packagerModelProductModels = new HashSet<PackagerModelProductModel>(0);
	private Set<PackagerModelPossibleTransformations> packagerModelPossibleTransformationsesForIdPackagerModelFrom = new HashSet<PackagerModelPossibleTransformations>(
			0);

	public PackagerModel() {
	}

	public PackagerModel(String oldRetailerKey, Date creationDate, Date lastUpdate, boolean multithreadedActions) {
		this.oldRetailerKey = oldRetailerKey;
		this.creationDate = creationDate;
		this.lastUpdate = lastUpdate;
		this.multithreadedActions = multithreadedActions;
	}

	public PackagerModel(String retailerKey, String oldRetailerKey, Date creationDate, Date lastUpdate,
			boolean multithreadedActions, Set<Retailer> retailers, Set<PackagerInstance> packagerInstances,
			Set<PackagerModelShippableItemConfiguration> packagerModelShippableItemConfigurations,
			Set<DeliveryTemplateConfiguration> deliveryTemplateConfigurations,
			Set<PackagerModelPossibleTransformations> packagerModelPossibleTransformationsesForIdPackagerModelTo,
			Set<PackagerModelProductModel> packagerModelProductModels,
			Set<PackagerModelPossibleTransformations> packagerModelPossibleTransformationsesForIdPackagerModelFrom) {
		this.retailerKey = retailerKey;
		this.oldRetailerKey = oldRetailerKey;
		this.creationDate = creationDate;
		this.lastUpdate = lastUpdate;
		this.multithreadedActions = multithreadedActions;
		this.retailers = retailers;
		this.packagerInstances = packagerInstances;
		this.packagerModelShippableItemConfigurations = packagerModelShippableItemConfigurations;
		this.deliveryTemplateConfigurations = deliveryTemplateConfigurations;
		this.packagerModelPossibleTransformationsesForIdPackagerModelTo = packagerModelPossibleTransformationsesForIdPackagerModelTo;
		this.packagerModelProductModels = packagerModelProductModels;
		this.packagerModelPossibleTransformationsesForIdPackagerModelFrom = packagerModelPossibleTransformationsesForIdPackagerModelFrom;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id_packager_model", unique = true, nullable = false)
	public Long getIdPackagerModel() {
		return this.idPackagerModel;
	}

	public void setIdPackagerModel(Long idPackagerModel) {
		this.idPackagerModel = idPackagerModel;
	}

	@Column(name = "retailer_key")
	public String getRetailerKey() {
		return this.retailerKey;
	}

	public void setRetailerKey(String retailerKey) {
		this.retailerKey = retailerKey;
	}

	@Column(name = "old_retailer_key", nullable = false)
	public String getOldRetailerKey() {
		return this.oldRetailerKey;
	}

	public void setOldRetailerKey(String oldRetailerKey) {
		this.oldRetailerKey = oldRetailerKey;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creation_date", nullable = false, length = 19)
	public Date getCreationDate() {
		return this.creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update", nullable = false, length = 19)
	public Date getLastUpdate() {
		return this.lastUpdate;
	}

	public void setLastUpdate(Date lastUpdate) {
		this.lastUpdate = lastUpdate;
	}

	@Column(name = "multithreaded_actions", nullable = false)
	public boolean isMultithreadedActions() {
		return this.multithreadedActions;
	}

	public void setMultithreadedActions(boolean multithreadedActions) {
		this.multithreadedActions = multithreadedActions;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "packagerModels")
	public Set<Retailer> getRetailers() {
		return this.retailers;
	}

	public void setRetailers(Set<Retailer> retailers) {
		this.retailers = retailers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "packagerModel")
	public Set<PackagerInstance> getPackagerInstances() {
		return this.packagerInstances;
	}

	public void setPackagerInstances(Set<PackagerInstance> packagerInstances) {
		this.packagerInstances = packagerInstances;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "packagerModel")
	public Set<PackagerModelShippableItemConfiguration> getPackagerModelShippableItemConfigurations() {
		return this.packagerModelShippableItemConfigurations;
	}

	public void setPackagerModelShippableItemConfigurations(
			Set<PackagerModelShippableItemConfiguration> packagerModelShippableItemConfigurations) {
		this.packagerModelShippableItemConfigurations = packagerModelShippableItemConfigurations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "packagerModel")
	public Set<DeliveryTemplateConfiguration> getDeliveryTemplateConfigurations() {
		return this.deliveryTemplateConfigurations;
	}

	public void setDeliveryTemplateConfigurations(Set<DeliveryTemplateConfiguration> deliveryTemplateConfigurations) {
		this.deliveryTemplateConfigurations = deliveryTemplateConfigurations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "packagerModelByIdPackagerModelTo")
	public Set<PackagerModelPossibleTransformations> getPackagerModelPossibleTransformationsesForIdPackagerModelTo() {
		return this.packagerModelPossibleTransformationsesForIdPackagerModelTo;
	}

	public void setPackagerModelPossibleTransformationsesForIdPackagerModelTo(
			Set<PackagerModelPossibleTransformations> packagerModelPossibleTransformationsesForIdPackagerModelTo) {
		this.packagerModelPossibleTransformationsesForIdPackagerModelTo = packagerModelPossibleTransformationsesForIdPackagerModelTo;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "packagerModel")
	public Set<PackagerModelProductModel> getPackagerModelProductModels() {
		return this.packagerModelProductModels;
	}

	public void setPackagerModelProductModels(Set<PackagerModelProductModel> packagerModelProductModels) {
		this.packagerModelProductModels = packagerModelProductModels;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "packagerModelByIdPackagerModelFrom")
	public Set<PackagerModelPossibleTransformations> getPackagerModelPossibleTransformationsesForIdPackagerModelFrom() {
		return this.packagerModelPossibleTransformationsesForIdPackagerModelFrom;
	}

	public void setPackagerModelPossibleTransformationsesForIdPackagerModelFrom(
			Set<PackagerModelPossibleTransformations> packagerModelPossibleTransformationsesForIdPackagerModelFrom) {
		this.packagerModelPossibleTransformationsesForIdPackagerModelFrom = packagerModelPossibleTransformationsesForIdPackagerModelFrom;
	}

	public PackagerInstance instantiate(PackagerRequest request, PackagerActionHistory history,
			ProductModelService productModelService, ManualDriverFactory manualDriverFactory, ManualDriver manualDriver)
			throws DriverException, NotRespectedRulesException, MalformedXMLException, PackagerException,
			NotFoundException, DataSourceException {
		if (request == null) {
			throw new NullException(NullCases.NULL, "request parameter");
		}

		if (request.getRetailerPackagerId() == null) {
			throw new NullException(NullCases.NULL, "request.retailerPackagerId parameter");
		}

		if (!request.getModel().equals(this.getRetailerKey())) {
			throw new NotRespectedRulesException(new ErrorCode("1.2.1.1.10"));
		}
		PackagerInstance result = new PackagerInstance();
		result.setRetailerPackagerId(request.getRetailerPackagerId());
		result.setPackagerModel(this);
		result.setCreationDate(new Date());

		result.setLastUpdate(new Date());
		/*
		 * result
		 * .setRetailer(PackagerLogicTierBeanFactory.getWebServiceUserService().
		 * getAuthenticatedUser() .getRetailer());
		 */
		Retailer retailer = new Retailer();
		retailer.setIdRetailer(1);
		retailer.setName("NORDNET.COM");
		result.setRetailer(retailer);

		history.setPackagerModel(this.getRetailerKey());
		history.setRetailerPackagerId(request.getRetailerPackagerId());
		history.setLastUpdate(new Date());
		for (ProductRequest productRequest : request.getProducts()) {
			ProductModel productModel = productModelService.findByRetailerKey(productRequest.getModel());

			ProductInstance productInstance = productModel.instantiate(productRequest.getProperties(), history,
					manualDriverFactory, manualDriver);

			result.addProductInstance(productInstance);
		}

		history.addDestination(result);

		if (LOGGER.isInfoEnabled()) {
			LOGGER.info("All products have been successfully created.");
		}

		try {
			result.updateReferences(history);
		} catch (Exception e) {
			if (LOGGER.isWarnEnabled()) {
				LOGGER.warn("Updating references didn't succeeded !", e);
			}
		}

		/*
		 * if (request.getDeliveryRequest() != null) { try {
		 * result.createAndSendDeliveryDemand(request.getDeliveryRequest(),
		 * true, history); } catch (DeliveryException e) {
		 * 
		 * if (LOGGER.isWarnEnabled()) {
		 * LOGGER.warn("The delivery demand has failed.", e); }
		 * 
		 * if (!e.getErrorCode().equals(new ErrorCode("1.2.2.24"))) { throw e; }
		 * 
		 * } }
		 */

		if (LOGGER.isInfoEnabled()) {
			LOGGER.info(
					"The packager instance [" + result.getRetailerPackagerId() + "] has been successfully created.");
		}

		return result;
	}

	public static void verifyXmlProperties(PackagerInstanceAction action, List<ProductRequest> requests,
			ProductModelService productModelService, ManualDriverFactory manualDriverFactory)
			throws DriverException, NotFoundException, MalformedXMLException, PackagerException, DataSourceException,
			NotRespectedRulesException {

		if (action == null) {
			throw new NullException(NullCases.NULL, "action parameter");
		}

		if (requests == null) {
			throw new NullException(NullCases.NULL, "requests parameter");
		}
		//
		// for (ProductRequest productRequest : requests) {
		// ProductModel productModel =
		// productModelService.findByRetailerKey(productRequest.getModel());
		//
		// switch (action) {
		// case CHANGE_PROPERTIES:
		// case TRANSFORM:
		// case SPLIT_DESTINATION:
		// case MERGE_DESTINATION:
		// case TRANSLOCATE_PRODUCT:
		//
		// manualDriverFactory.verifyXmlProperties(Action.CHANGE_PROPERTIES,
		// productRequest.getProperties());
		// break;
		// case ACTIVATE:
		// manualDriverFactory.verifyXmlProperties(Action.ACTIVATE,
		// productRequest.getProperties());
		// break;
		// case SUSPEND:
		// manualDriverFactory.verifyXmlProperties(Action.SUSPEND,
		// productRequest.getProperties());
		// break;
		// case REACTIVATE:
		// manualDriverFactory.verifyXmlProperties(Action.REACTIVATE,
		// productRequest.getProperties());
		// break;
		// case RESET:
		// manualDriverFactory.verifyXmlProperties(Action.RESET,
		// productRequest.getProperties());
		// break;
		// case DELETE:
		// manualDriverFactory.verifyXmlProperties(Action.DELETE,
		// productRequest.getProperties());
		// break;
		// case CANCEL:
		// case SPLIT_SOURCE:
		// case MERGE_SOURCE:
		// manualDriverFactory.verifyXmlProperties(Action.CANCEL,
		// productRequest.getProperties());
		//
		// break;
		// case CREATE:
		//
		// FeasibilityTestResult fr = manualDriverFactory
		// .testFeasibilityForProductCreation(productRequest.getProperties());
		// if (!fr.getPossible()) {
		// if (fr.getExceptionCause() == null) {
		// throw new NotRespectedRulesException(new ErrorCode("1.2.2.25"), new
		// Exception(fr.getMotive()));
		// } else {
		// throw new NotRespectedRulesException(new ErrorCode("1.2.2.25"),
		// fr.getExceptionCause());
		// }
		// }
		//
		// break;
		// default:
		// throw new NotRespectedRulesException(new ErrorCode("0.2.2.2"), new
		// Object[] { action });
		// }
		// }

		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("Properties are valid.");
		}
	}

	public void verifyProductOccurences(List<ProductRequest> requests)
			throws NotRespectedRulesException, PackagerException {

		Map<String, Integer> productOccurences = new HashMap<String, Integer>();

		if (requests != null) {
			for (ProductRequest productRequest : requests) {
				if (productOccurences.containsKey(productRequest.getModel())) {
					productOccurences.put(productRequest.getModel(),
							productOccurences.get(productRequest.getModel()) + 1);
				} else {
					productOccurences.put(productRequest.getModel(), 1);
				}
			}
		}

		for (String key : productOccurences.keySet()) {
			boolean foundConfig = false;
			for (PackagerModelProductModel config : this.packagerModelProductModels) {
				if (config.getProductModel().getRetailerKey().equals(key)) {
					foundConfig = true;
					if (productOccurences.get(key) < config.getMinimumInstances()) {
						throw new NotRespectedRulesException(new ErrorCode("1.2.2.22"),
								new Object[] { key, config.getMinimumInstances(), productOccurences.get(key) });
					} else {
						if (productOccurences.get(key) > config.getMaximumInstances()) {
							throw new NotRespectedRulesException(new ErrorCode("1.2.2.20"),
									new Object[] { key, config.getMaximumInstances(), productOccurences.get(key) });
						}
					}
					break;
				}
			}

			if (!foundConfig) {
				throw new NotRespectedRulesException(new ErrorCode("1.2.2.21"),
						new Object[] { key, this.getRetailerKey() });
			}
		}

		for (PackagerModelProductModel pc : this.packagerModelProductModels) {
			if (pc.getMinimumInstances() != 0) {
				if (!productOccurences.keySet().contains(pc.getProductModel().getRetailerKey())) {
					throw new NotRespectedRulesException(new ErrorCode("1.2.2.23"),
							new Object[] { pc.getProductModel().getRetailerKey(), pc.getMinimumInstances() });
				}
			}
		}

		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("Product occurences are valid.");
		}
	}

}
