package tn.wevioo.authentication.entities;
// Generated 13 avr. 2017 17:13:26 by Hibernate Tools 5.1.2.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users", catalog = "test_authentification_manager")
public class Users implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	private Long id;
	private Authorities authorities;
	private boolean enabled;
	private String username;
	private String password;
	private Set<Server> serversForModifierId = new HashSet<Server>(0);
	private Set<Service> servicesForModifierId = new HashSet<Service>(0);
	private Set<Caller> callersForCreatorId = new HashSet<Caller>(0);
	private Set<Server> serversForCreatorId = new HashSet<Server>(0);
	private Set<WebService> webServicesForCreatorId = new HashSet<WebService>(0);
	private Set<Caller> callersForModifierId = new HashSet<Caller>(0);
	private Set<Service> servicesForCreatorId = new HashSet<Service>(0);
	private Set<WebService> webServicesForModifierId = new HashSet<WebService>(0);

	public Users() {
	}

	public Users(boolean enabled, String username, String password) {
		this.enabled = enabled;
		this.username = username;
		this.password = password;
	}

	public Users(Authorities authorities, boolean enabled, String username, String password,
			Set<Server> serversForModifierId, Set<Service> servicesForModifierId, Set<Caller> callersForCreatorId,
			Set<Server> serversForCreatorId, Set<WebService> webServicesForCreatorId, Set<Caller> callersForModifierId,
			Set<Service> servicesForCreatorId, Set<WebService> webServicesForModifierId) {
		this.authorities = authorities;
		this.enabled = enabled;
		this.username = username;
		this.password = password;
		this.serversForModifierId = serversForModifierId;
		this.servicesForModifierId = servicesForModifierId;
		this.callersForCreatorId = callersForCreatorId;
		this.serversForCreatorId = serversForCreatorId;
		this.webServicesForCreatorId = webServicesForCreatorId;
		this.callersForModifierId = callersForModifierId;
		this.servicesForCreatorId = servicesForCreatorId;
		this.webServicesForModifierId = webServicesForModifierId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "authority_id")
	public Authorities getAuthorities() {
		return this.authorities;
	}

	public void setAuthorities(Authorities authorities) {
		this.authorities = authorities;
	}

	@Column(name = "enabled", nullable = false)
	public boolean isEnabled() {
		return this.enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	@Column(name = "username", nullable = false)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByModifierId")
	public Set<Server> getServersForModifierId() {
		return this.serversForModifierId;
	}

	public void setServersForModifierId(Set<Server> serversForModifierId) {
		this.serversForModifierId = serversForModifierId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByModifierId")
	public Set<Service> getServicesForModifierId() {
		return this.servicesForModifierId;
	}

	public void setServicesForModifierId(Set<Service> servicesForModifierId) {
		this.servicesForModifierId = servicesForModifierId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatorId")
	public Set<Caller> getCallersForCreatorId() {
		return this.callersForCreatorId;
	}

	public void setCallersForCreatorId(Set<Caller> callersForCreatorId) {
		this.callersForCreatorId = callersForCreatorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatorId")
	public Set<Server> getServersForCreatorId() {
		return this.serversForCreatorId;
	}

	public void setServersForCreatorId(Set<Server> serversForCreatorId) {
		this.serversForCreatorId = serversForCreatorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatorId")
	public Set<WebService> getWebServicesForCreatorId() {
		return this.webServicesForCreatorId;
	}

	public void setWebServicesForCreatorId(Set<WebService> webServicesForCreatorId) {
		this.webServicesForCreatorId = webServicesForCreatorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByModifierId")
	public Set<Caller> getCallersForModifierId() {
		return this.callersForModifierId;
	}

	public void setCallersForModifierId(Set<Caller> callersForModifierId) {
		this.callersForModifierId = callersForModifierId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatorId")
	public Set<Service> getServicesForCreatorId() {
		return this.servicesForCreatorId;
	}

	public void setServicesForCreatorId(Set<Service> servicesForCreatorId) {
		this.servicesForCreatorId = servicesForCreatorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByModifierId")
	public Set<WebService> getWebServicesForModifierId() {
		return this.webServicesForModifierId;
	}

	public void setWebServicesForModifierId(Set<WebService> webServicesForModifierId) {
		this.webServicesForModifierId = webServicesForModifierId;
	}

}
